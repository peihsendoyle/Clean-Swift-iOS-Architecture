//
//  CreateOrderViewControllerTests.swift
//  CleanStore
//
//  Created by Hiep Nguyen on 3/3/16.
//  Copyright (c) 2016 Zyncas. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

@testable import CleanStore
import XCTest

class CreateOrderViewControllerTests: XCTestCase
{
    // MARK: Subject under test
    
    var sut: CreateOrderViewController!
    var window: UIWindow!
    
    // MARK: Test lifecycle
    
    override func setUp()
    {
        super.setUp()
        window = UIWindow()
        setupCreateOrderViewController()
    }
    
    override func tearDown()
    {
        window = nil
        super.tearDown()
    }
    
    // MARK: Test setup
    
    func setupCreateOrderViewController()
    {
        let bundle = NSBundle.mainBundle()
        let storyboard = UIStoryboard(name: "Main", bundle: bundle)
        sut = storyboard.instantiateViewControllerWithIdentifier("CreateOrderViewController") as! CreateOrderViewController
        
        _ = sut.view
        
        loadView()
    }
    
    func loadView()
    {
        window.addSubview(sut.view)
        NSRunLoop.currentRunLoop().runUntilDate(NSDate())
    }
    
    // MARK: Test doubles
    
    class CreateOrderViewControllerOutputSpy: CreateOrderViewControllerOutput {
        
        // MARK: Method call expectations
        
        var formatExpirationDateCalled = false
        
        // MARK: Argument expectations
        
        var createOrder_FormatExpirationDate_Request : CreateOrder_FormatExpirationDate_Request!
        
        // MARK: Spied variables
        
        var shippingMethods = [String]()
        
        // MARK: Spied methods
        
        func formatExpirationDate(request: CreateOrder_FormatExpirationDate_Request) {
            
            formatExpirationDateCalled = true
            
            createOrder_FormatExpirationDate_Request = request
        }
    }
    
    // MARK: Tests
    
    func testDisplayExpirationDateShouldDisplayDateStringInTextField() {
        
        // Given
        
        let viewModel = CreateOrder_FormatExpirationDate_ViewModel(date: "03/03/2016")
        
        // When
        
        sut.displayExpirationDate(viewModel)
        
        // Then
        
        let displayedDate = sut.expirationDateTextField.text
        
        XCTAssertEqual(displayedDate, "03/03/2016", "Displaying an expiration date should display the date string in the expiration date text field")
    }
    
    func testExpirationDatePickerValueChangedShouldFormatSelectedDate() {
        
        // Given
        
        let createOrderViewControllerOutputSpy = CreateOrderViewControllerOutputSpy()
        
        sut.output = createOrderViewControllerOutputSpy
        
        // When
        
        let dateComponents = NSDateComponents()
        
        dateComponents.year = 16
        
        dateComponents.month = 03
        
        dateComponents.day = 03
        
        let selectedDate = NSCalendar.currentCalendar().dateFromComponents(dateComponents)!
        
        sut.expirationDatePicker.date = selectedDate
        
        sut.expirationDatePickerValueChanged(self)
        
        // Then
        
        XCTAssert(createOrderViewControllerOutputSpy.formatExpirationDateCalled, "Changing the expiration date should format the expiration date")
        
        let actualDate = createOrderViewControllerOutputSpy.createOrder_FormatExpirationDate_Request.date
        
        XCTAssertEqual(actualDate, selectedDate, "Changing the expiration date should format the date selected in the date picker")
    }
    
    func testNumberOfComponentsInPickerViewShouldReturnOneComponent() {
        
        // Given
        
        let pickerView = sut.shippingMethodPicker
        
        // When
        
        let numberOfComponents = sut.numberOfComponentsInPickerView(pickerView)
        
        // Then
        
        XCTAssertEqual(numberOfComponents, 1, "The number in the shipping method picker should be 1")
    }
    
    func testNumberOfRowsInFirstComponentOfPickerViewShouldEqualNumberOfAvailableShippingMethods() {
        
        // Given
        
        let pickerView = sut.shippingMethodPicker
        
        // When
        
        let numberOfRows = sut.pickerView(pickerView, numberOfRowsInComponent: 0)
        
        // Then
        
        let numberOfAvailableShippingMethods = sut.output.shippingMethods.count
        
        XCTAssertEqual(numberOfRows, numberOfAvailableShippingMethods, "Number of rows in shipping method picker should be the same with number of available shipping methods")
    }
    
    func testShippingMethodPickerShouldDisplayProperTitles() {
        
        // Given
        
        let pickerView = sut.shippingMethodPicker
        
        // When
        
        let returnedTitles = [sut.pickerView(pickerView, titleForRow: 0, forComponent: 0),
                              sut.pickerView(pickerView, titleForRow: 1, forComponent: 0),
                              sut.pickerView(pickerView, titleForRow: 2, forComponent: 0)]
        
        // Then
        
        let expectedTitles = ["Standard Shipping", "2-day Shipping", "1-day Shipping"]
        
        XCTAssertEqual(expectedTitles[0], returnedTitles[0], "Should be the same")
        
        XCTAssertEqual(expectedTitles[1], returnedTitles[1], "Should be the same")
        
        XCTAssertEqual(expectedTitles[2], returnedTitles[2], "Should be the same")
    }
    
    func testSelectingShippingMethodInThePickerShouldDisplayTheSelectedShippingMethodToUser() {
        
        // Given
        
        let pickerView = sut.shippingMethodPicker
        
        // When
        
        sut.pickerView(pickerView, didSelectRow: 1, inComponent: 0)
        
        // Then
        
        let expectedShippingMethod = "2-day Shipping"
        
        let displayedShippingMethod = sut.shippingMethodTextField.text
        
        XCTAssertEqual(expectedShippingMethod, displayedShippingMethod, "Should be the same")
    }
    
    func testCursorFocusShouldMoveToNextTextFieldWhenUserTapsReturnKey() {
        
        // Given
        
        let currentTextField = sut.textFields[0]
        
        let nextTextField = sut.textFields[1]
        
        currentTextField.becomeFirstResponder()
        
        // When
        
        sut.textFieldShouldReturn(currentTextField)
        
        // Then
        
        XCTAssert(!currentTextField.isFirstResponder(), "Current text field should lose keyboard focus")
        
        XCTAssert(nextTextField.isFirstResponder(), "Next text field should gain keyboard focus")
    }
    
    func testKeyboardShouldBeDismissedWhenUserTapsReturnKeyWhenFocusIsInLastTextField() {
        
        // Given
        
        // Scroll to the bottom of table view so the last text field is visible and its recognizer is set up
        
        let lastSectionIndex = sut.tableView.numberOfSections - 1
        
        let lastRowIndex = sut.tableView.numberOfRowsInSection(lastSectionIndex) - 1
        
        sut.tableView.scrollToRowAtIndexPath(NSIndexPath(forRow: lastRowIndex, inSection: lastSectionIndex), atScrollPosition: .Bottom, animated: false)
        
        // Show keyboard for the last text field
        
        let numTextFields = sut.textFields.count
        
        let lastTextField = sut.textFields[numTextFields - 1]
        
        lastTextField.becomeFirstResponder()
        
        // When
        
        sut.textFieldShouldReturn(lastTextField)
        
        // Then
        
        XCTAssert(!lastTextField.isFirstResponder(), "Last text field should lose the keyboard focus")
    }
    
    func testTextFieldShouldHaveFocusWhenUserTapsOnTableViewRow() {
        
        // Given
        
        // When
        
        let indexPath = NSIndexPath(forRow: 1, inSection: 0)
        
        sut.tableView(sut.tableView, didSelectRowAtIndexPath: indexPath)
        
        // Then
        
        let textField = sut.textFields[1]
        
        XCTAssert(textField.isFirstResponder(), "The text field should have keyboard focus when user taps on the corresponding table view row")
    }
    
    func testCreateOrderViewControllerShouldConfigurePickersWhenViewIsLoaded() {
        
        // Given
        
        // When
        
        // Then
        
        XCTAssertEqual(sut.expirationDateTextField.inputView, sut.expirationDatePicker, "picker should be input view of text field")
        
        XCTAssertEqual(sut.shippingMethodTextField.inputView, sut.shippingMethodPicker, "picker should be input view of text field")
    }
    
    func testSomething()
    {
        // Given
        
        // When
        
        // Then
    }
}
