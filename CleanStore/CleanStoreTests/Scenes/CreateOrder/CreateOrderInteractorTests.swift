//
//  CreateOrderInteractorTests.swift
//  CleanStore
//
//  Created by Hiep Nguyen on 3/3/16.
//  Copyright (c) 2016 Zyncas. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

@testable import CleanStore
import XCTest

class CreateOrderInteractorTests: XCTestCase
{
    // MARK: Subject under test
    
    var sut: CreateOrderInteractor!
    
    // MARK: Test lifecycle
    
    override func setUp()
    {
        super.setUp()
        setupCreateOrderInteractor()
    }
    
    override func tearDown()
    {
        super.tearDown()
    }
    
    // MARK: Test setup
    
    func setupCreateOrderInteractor()
    {
        sut = CreateOrderInteractor()
    }
    
    // MARK: Test doubles
    
    class CreateOrderInteractorOutputSpy : CreateOrderInteractorOutput {
        
        var presentExpirationDateCalled = false
        
        func presentExpirationDate(response: CreateOrder_FormatExpirationDate_Response) {
            
            presentExpirationDateCalled = true
        }
    }
    
    // MARK: Tests
    
    func testFormatExpirationDateShouldAskPresenterToFormatExpirationDate() {
        
        // Given
        
        let createOrderInteractorOutputSpy = CreateOrderInteractorOutputSpy()
        
        sut.output = createOrderInteractorOutputSpy
        
        // When
        
        let request = CreateOrder_FormatExpirationDate_Request(date: NSDate())
        
        sut.formatExpirationDate(request)
        
        // Then
        
        XCTAssert(createOrderInteractorOutputSpy.presentExpirationDateCalled, "Formatting an expiration date should ask presenter to do it")
    }
    
    func testShippingMethodsShouldReturnAllAvailableShippingMethods() {
        
        // Given
        
        let allAvailableShippingMethods = ["Standard Shipping", "2-day Shipping", "1-day Shipping"]
        
        // When
        
        let returnedShippingMethods = sut.shippingMethods
        
        // Then
        
        XCTAssertEqual(returnedShippingMethods, allAvailableShippingMethods, "Shipping Methods should list all available shipping methods")
    }
    
    func testSomething()
    {
        // Given
        
        // When
        
        // Then
    }
}
