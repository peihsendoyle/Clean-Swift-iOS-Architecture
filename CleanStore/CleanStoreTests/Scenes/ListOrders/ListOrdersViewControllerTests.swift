//
//  ListOrdersViewControllerTests.swift
//  CleanStore
//
//  Created by Hiep Nguyen on 3/2/16.
//  Copyright (c) 2016 Zyncas. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

@testable import CleanStore
import XCTest

class ListOrdersViewControllerTests: XCTestCase
{
    // MARK: Subject under test
    
    var sut: ListOrdersViewController!
    var window: UIWindow!
    
    // MARK: Test lifecycle
    
    override func setUp()
    {
        super.setUp()
        window = UIWindow()
        setupListOrdersViewController()
    }
    
    override func tearDown()
    {
        window = nil
        super.tearDown()
    }
    
    // MARK: Test setup
    
    func setupListOrdersViewController()
    {
        let bundle = NSBundle.mainBundle()
        let storyboard = UIStoryboard(name: "Main", bundle: bundle)
        sut = storyboard.instantiateViewControllerWithIdentifier("ListOrdersViewController") as! ListOrdersViewController
    }
    
    func loadView()
    {
        window.addSubview(sut.view)
        NSRunLoop.currentRunLoop().runUntilDate(NSDate())
    }
    
    // MARK: Test doubles
    
    class ListOrdersViewControllerOutputSpy : ListOrdersViewControllerOutput {
        
        // MARK: Method call expectations
        
        var fetchOrdersCalled = false
        
        // MARK: Spied methods
        
        func fetchOrders(request: ListOrders_FetchOrders_Request) {
            
            fetchOrdersCalled = true
        }
    }
    
    class TableViewSpy: UITableView {
        
        // MARK: Method call expectations
        
        var reloadDataCalled = false
        
        // Spied methods
        
        override func reloadData() {
            
            reloadDataCalled = true
        }
    }
    // MARK: Tests
    
    func testShouldFetchOrdersWhenViewIsLoaded() {
        
        // Given
        
        let listOrdersViewControllerOutputSpy = ListOrdersViewControllerOutputSpy()
        
        sut.output = listOrdersViewControllerOutputSpy
        
        // When
        
        loadView()
        
        // Then
        
        XCTAssert(listOrdersViewControllerOutputSpy.fetchOrdersCalled, "Should fetch orders when view is loaded")
    }
    
    func testShouldDisplayFetchedOrders() {
        
        // Given
        
        let tableViewSpy = TableViewSpy()
        
        sut.tableView = tableViewSpy
        
        // When
        
        let displayedOrders = [ListOrders_FetchOrders_ViewModel.DisplayedOrder(id: "doyle", date: "03/03/16", email: "peihsen.doyle@gmail.com", name: "Nguyen Hieu Hiep", total: "$1.23")]
        
        let viewModel = ListOrders_FetchOrders_ViewModel(displayedOrders: displayedOrders)
        
        sut.displayFetchedOrders(viewModel)
        
        // Then
        
        XCTAssert(tableViewSpy.reloadDataCalled, "Displaying fetched orders should reload the table view")
    }
    
    func testNumberOfSectionsInTableViewShouldAlwaysBeOne() {
        
        // Given
        
        let tableView = sut.tableView
        
        // When
        
        let numberOfSections = sut.numberOfSectionsInTableView(tableView)
        
        // Then
        
        XCTAssertEqual(numberOfSections, 1, "Should be the same")
    }
    
    func testNumberOfRowsInAnySectionShouldEqaulNumberOfOrdersToDisplay() {
        
        // Given
        
        let tableView = sut.tableView
        
        // When
        
        let testDisplayedOrders = [ListOrders_FetchOrders_ViewModel.DisplayedOrder(id: "doyle", date: "03/03/16", email: "peihsen.doyle@gmail.com", name: "Nguyen Hieu Hiep", total: "$1.23")]
        
        sut.displayedOrders = testDisplayedOrders
        
        // Then
        
        let numberOfRows = tableView.numberOfRowsInSection(0)
        
        XCTAssertEqual(numberOfRows, testDisplayedOrders.count, "Number of test displayed orders should be the same as numberOfRows")
    }
    
    func testShouldConfigureTableViewCellToDisplayOrder() {
        
        // Given
        
        let tableView = sut.tableView
        
        // When
        
        let testDisplayedOrders = [ListOrders_FetchOrders_ViewModel.DisplayedOrder(id: "doyle", date: "03/03/16", email: "peihsen.doyle@gmail.com", name: "Nguyen Hieu Hiep", total: "$1.23")]
        
        sut.displayedOrders = testDisplayedOrders
        
        let indexPath = NSIndexPath(forRow: 0, inSection: 0)
        
        let cell = sut.tableView(tableView, cellForRowAtIndexPath: indexPath)
        
        // Then
        
        XCTAssertEqual(cell.textLabel?.text, "03/03/16", "Should be the same")
        
        XCTAssertEqual(cell.detailTextLabel?.text, "$1.23", "Should be the same")
    }
}
